{"version":3,"sources":["state.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Index","theme","dispatch","to","Button","variant","onClick","type","newTheme","About","Users","AppRouter","state","action","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQACaA,EAAeC,0BACfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,SAAzB,OACzB,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAGMI,EAAgB,kBAAMC,qBAAWV,I,oOCC9C,SAASW,IAAS,IAAD,EACiBF,IADjB,mBACJG,EADI,KACJA,MAASC,EADL,KAGb,OACE,6BACA,oCACG,kBAAC,IAAD,CAAMC,GAAG,UAAT,mBACC,kBAACC,EAAA,EAAD,CACEC,QAASJ,EAAMI,QACfC,QAAS,kBAAMJ,EAAS,CACdK,KAAM,cACNC,SAAU,CAAEH,QAAS,eAG9BJ,EAAMI,UAMnB,SAASI,IACL,OAAO,qCAGX,SAASC,IACL,OAAO,qCA+BIC,MA5Bf,WAiBE,OACE,kBAAC,EAAD,CAAelB,aAjBI,CACnBQ,MAAO,CAAEI,QAAS,cAgByBb,QAb7B,SAACoB,EAAOC,GACtB,OAAQA,EAAON,MACf,IAAK,cACH,O,qVAAO,CAAP,GACKK,EADL,CAEEX,MAAOY,EAAOL,WAElB,QACE,OAAOI,KAMP,kBAAC,IAAD,CAAQE,SAAS,cACf,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,UAAUE,UAAWR,IACjC,kBAAC,IAAD,CAAOM,KAAK,UAAUE,UAAWP,OC9CrBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4b93aa16.chunk.js","sourcesContent":["import React, {createContext, useContext, useReducer} from 'react';\nexport const StateContext = createContext();\nexport const StateProvider = ({reducer, initialState, children}) =>(\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </StateContext.Provider>\n);\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { StateProvider } from './state';\n\nimport { useStateValue } from './state';\nimport { Button} from 'react-bootstrap';\n\n\nfunction Index() {\n    const [{ theme }, dispatch] = useStateValue();\n\n    return (\n      <div>\n      <h2>Home</h2>\n         <Link to=\"/about\">about basaename</Link>\n          <Button\n            variant={theme.variant}\n            onClick={() => dispatch({\n                      type: 'changeTheme',\n                      newTheme: { variant: 'success'}\n                    })}\n          >\n            {theme.variant}\n          </Button>\n      </div>\n    )\n}\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\nfunction Users() {\n    return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  const initialState = {\n    theme: { variant: 'secondary' }\n  };\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n    case 'changeTheme':\n      return {\n        ...state,\n        theme: action.newTheme\n      };\n    default:\n      return state;\n    }\n  };\n\n  return (\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <Router basename=\"/reacttest\">\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/about/\" component={About} />\n        <Route path=\"/users/\" component={Users} />\n      </Router>\n    </StateProvider>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}